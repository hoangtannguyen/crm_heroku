<?php
namespace App\Http\Controllers\backends;
use App\Http\Controllers\Controller;
use Illuminate\Auth\Events\Registered;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\Rule;
use App\Models\User;
use App\Models\Department;
use Laravel\Fortify\Contracts\CreatesNewUsers;
use Spatie\Permission\Models\Role;

class UserAdminController extends Controller {
    public function index(Request $request){
        $users = User::query();
        if($request->keyword != '') $users = $users->where('name', 'like', '%'.$request->keyword.'%')->orWhere('username', 'like', '%'.$request->keyword.'%');
        $users = $users->latest()->paginate(12);
        $data = [
            'users' => $users,
            'keyword' => $request->keyword,
        ];
       return view('backends.users.list',$data);
    }

    public function create(Request $request){
        $departments = Department::select('id','title')->get();
        $data = [
            'roles' => Role::all(),
            'departments' => $departments
        ];
       return view('backends.users.create', $data);
    }

    public function store(Request $request, CreatesNewUsers $creator){

        event(new Registered($user = $creator->create($request->all())));

        if($user) {

            $request->session()->flash('success', 'Create Successful!');

            if($request->role != '') {

                $check_exist = Role::where('name', $request->role)->first();

                if($check_exist) $user->assignRole($request->role);

                else {
                    $request->session()->flash('error', 'Role '.$request->role.' not exist!');
                    return redirect()->route('admin.users');
                }
            }

        }else{
            $request->session()->flash('error', 'Has error!');
            return redirect()->route('admin.user_create');

        }
        return redirect()->route('admin.users');
    }

    public function edit(Request $request, $id){
        $user = User::findOrFail($id);
        $departments = Department::select('id','title')->get();
        $data = [
            'user' => $user,
            'roles' => Role::all(),
            'departments' => $departments
        ];
        return view('backends.users.edit', $data);
    }

    public function update(Request $request, $id){
        $user = User::findOrFail($id);
        $rules = [
            'phone'=>['required',Rule::unique('users')->ignore($user->id)],
            'email'=>['required','email',Rule::unique('users')->ignore($user->id)],
            'displayname'=>'required',
            'department_id'=>'required',
        ];

        $messages = [
            'phone.required'=>'Please input phone number!',
            'phone.unique'=>'Phone had exist!',
            'email.required'=>'Please input email!',
            'email.unique'=>'Email had exist!',
            'displayname.required'=>'Please input Display name!',
            'department_id'=>'Please input department!',
        ];

        if($request->password != ''){

            $rules['password'] = 'required|min:8|max:32';

            $rules['confirmPassword'] = 'required|same:password';

            $messages['password.required'] = 'Please input password!';

            $messages['password.min'] = 'Password min is 8 characters!';

            $messages['password.max'] = 'Password min is 32 characters!';

            $messages['confirmPassword.required'] = 'Please confirm password!';

            $messages['confirmPassword.same'] = 'Password confirm not match!';

        }

        $validator = Validator::make($request->all(), $rules, $messages);

        if($validator->fails()){

            return redirect()->route('admin.user_edit',['id'=>$id])->withErrors($validator)->withInput();

        }else{

            $user->phone = $request['phone'];

            $user->email = $request['email'];

            $user->address = $request['address'];

            $user->image = $request['image'];

            $user->displayname = $request['displayname'];

            if($request->password != '') $user->password = bcrypt($request->password);

            if($user->save()) {

                if($request->role != '') {

                    $check_exist = Role::where('name', $request->role)->first();

                    if($check_exist) $user->syncRoles([$request->role]);

                    else {

                        $request->session()->flash('error', 'Role '.$request->role.' not exist!');

                        return redirect()->route('admin.users');

                    }

                }

                $request->session()->flash('success', 'Update Successful!');

                return redirect()->route('admin.users');

            }else{

                $request->session()->flash('error', 'Has error!');

                return redirect()->route('admin.user_edit',['id'=>$id]);

            }

        }

    }



    public function delete(Request $request, $id){

        $user = User::findOrFail($id);

        $request->session()->flash('success', 'Delete Successful!');

        $user->delete();

        return redirect()->route('admin.users');

    }



    public function deleteChoose(Request $request){

        $items = explode(",",$request->items);

        if(count($items)>0){

            $request->session()->flash('success', 'Delete Successful!');

            User::destroy($items);

        }else{

            $request->session()->flash('error', 'Has error!');

        }

        return redirect()->route('admin.users');

    }

}